syntax = "proto3";

package com.devProblems;

import "google/protobuf/empty.proto";

// Message Definitions
message File {
  bytes content = 1;
  string fileName = 2;
  string username = 3; // new
}

message FileUploadRequest {
  File file = 1;
  string key = 2; // new, this is the key that was used to distribute it to correct node upon replicating
}


message FileDownloadRequest {
  string fileName = 1;
  string requester = 2;
}

enum UploadStatus {
  SUCCESS = 0;
  FAILED = 1;
}

message FileUploadResponse {
  string fileName = 1;
  UploadStatus uploadStatus = 2;
}

message FileDownloadResponse {
  File file = 1;
}

message FileRangeRequest {
  string startHash = 1;
  string endHash = 2;
}

message FileTesting {
  string text = 1;
}

message FileMetadata {
  string fileNameWithType = 1;
  int32 contentLength = 2;
  string author = 3;
}

message ListFilesResponse {
  repeated FileMetadata files = 1;
}

message HealthCheckResponse {
  string status = 1;
}

enum FileOperations {
  CREATE = 0;
  WRITE = 1;
  CLOSE = 2;
}

message NodeInfo {
  string id = 1;
  string ip = 2;
  int32 port = 3;
}

message NodesInfo {
  repeated NodeInfo nodeList = 1;
}

message JoinRequest {
  NodeInfo new_node = 1;
}

message JoinResponse {
  bool success = 1;
  NodeInfo successor = 2;
}

message StabilizeRequest {
  NodeInfo caller = 1;
}

message StabilizeResponse {
  bool success = 1;
}

message NotifyRequest {
  NodeInfo caller = 1;
}

message NotifyResponse {
  bool success = 1;
}

message LeaveResponse {
  bool success = 1;
}

message PingRequest {
  NodeInfo node = 1;
}

message PingResponse {
  bool alive = 1;
}

message UpdateFingerTableRequest {
  NodeInfo s = 1;
  int32 i = 2;
}

message GetNodeInfoRequest {}

message GetNodeInfoResponse {
  NodeInfo node = 1;
}

message ClosestRequest {
  string id = 1;
}


message StoreFileResponse {
  string fileName = 1;
  bool success = 2;
}

message RetrieveFileRequest {
  string fileName = 1;
}

message Node {
  string ip = 1;
  int32 port = 2;
  string id = 3;
  NodeInfo predecessor = 4;
  NodeInfo successor = 5;
  FingerTable fingerTable = 6;
  int32 m = 7;
  FileStore fileStore = 8;
}

message FingerTable {
  repeated NodeInfo finger = 1;
}

message FileStore {
  repeated File files = 1;
}

// used for re-replication
message NodeReplicationMap {
  repeated MapEntry entries = 1;
}

// used for re-replication
message MapEntry {
  string key = 1;
  repeated string values = 2;
}

// New implementation of adding file mapping to successor, the two message types above probably will not be used
message FileMappingList {
  repeated string fileMappings = 1; // Each entry will be in the format "username:filename"
}

// -------------- Hopefully this is final implementation, the 3 messageTypes will probably not be used
// Define a repeated string for the list
message StringList {
  repeated string values = 1;
}

// Define the map with String keys and StringList values
message FileMappingMap {
  map<string, StringList> mappings = 1;
}

// Request message for sending the file mappings
message FileMappingRequest {
  FileMappingMap fileMappingMap = 1;
}



// Service Definitions
service FileUploadService {
  rpc uploadFile (stream FileUploadRequest) returns (FileUploadResponse) {}
  rpc downloadFile (FileDownloadRequest) returns (stream FileDownloadResponse) {}
  rpc testMethod (FileDownloadRequest) returns (FileTesting) {}
}

service FileOperationsService {
  rpc listFiles (google.protobuf.Empty) returns (ListFilesResponse) {}
  rpc getFileMetadata (FileDownloadRequest) returns (FileMetadata) {}
  rpc healthCheck (google.protobuf.Empty) returns (HealthCheckResponse) {}
}

service NodeOperationsService {
  rpc joinRequest (NodeInfo) returns (NodesInfo) {}
  rpc leaveRequest (NodesInfo) returns (google.protobuf.Empty) {}
}

service Chord {
  rpc join (JoinRequest) returns (JoinResponse);
  rpc findSuccessor (NodeInfo) returns (NodeInfo);
  rpc stabilize (StabilizeRequest) returns (StabilizeResponse);
  rpc notify (NotifyRequest) returns (NotifyResponse);
  rpc leave (google.protobuf.Empty) returns (LeaveResponse);
  rpc ping (PingRequest) returns (PingResponse);
  rpc getPredecessor (google.protobuf.Empty) returns (NodeInfo);
  rpc getSuccessor (google.protobuf.Empty) returns (NodeInfo);
  rpc setPredecessor (NodeInfo) returns (google.protobuf.Empty);
  rpc setSuccessor (NodeInfo) returns (google.protobuf.Empty);
  rpc closestPrecedingFinger (ClosestRequest) returns (NodeInfo);
  rpc updateFingerTable(UpdateFingerTableRequest) returns (google.protobuf.Empty);
  rpc getNodeInfo (GetNodeInfoRequest) returns (GetNodeInfoResponse);
  rpc storeFile(stream FileUploadRequest) returns (FileUploadResponse);
  rpc retrieveFile(FileDownloadRequest) returns (stream FileDownloadResponse);
  rpc deleteFile(FileDownloadRequest) returns (google.protobuf.Empty);

  // Stream-based File management in Chord
  rpc storeFileInChord (stream FileUploadRequest) returns (FileUploadResponse);
  rpc retrieveFileFromChord (FileDownloadRequest) returns (stream FileDownloadResponse);
  rpc deleteFileFromChord (FileDownloadRequest) returns (google.protobuf.Empty);
  rpc getChordNodeInfo (google.protobuf.Empty) returns (Node);

  // for joining when multiple files are transferred
  rpc retrieveFilesForSpan (FileRangeRequest) returns (stream FileDownloadResponse);

  // for transferring the replication map for handling case where replication needs to be done again after crash
  // might not use this any longer
  rpc storeReplicationMapCopy(NodeReplicationMap) returns (google.protobuf.Empty);

  // rpc storeFileMappings(FileMappingList) returns (google.protobuf.Empty);


  // this is latest, might not use the two above
  rpc storeFileMappings(FileMappingRequest) returns (google.protobuf.Empty);
}
